---
title: "Analyze YRBS by Year - Traditional"
format: html
editor: visual
---

## 

### Packages - Working Directory

```{r message = FALSE, warning = FALSE, eval=FALSE}

# Load Packages
library(tidyr)      # for data tidying operations like 'spread' & 'gather'
library(haven)      # allows reading and writing of SPSS, Stata, & SAS files
library(dplyr)      # data manipulation operations, filter/mutate/select/etc.
library(readxl)     # read data from Excel files (.xlsx and .xls)
library(openxlsx)   # reading, writing, & editing Excel files without Java 
library(survey)     # analysis of complex survey samples
library(srvyr)      # brings 'dplyr' syntax to survey statistics from 'survey' pkg
library(stringr)    # consistent, simple tools to work with strings of chr
options(scipen=999) # avoid the use of scientific notation (e.g., 1e+03) 
options(survey.lonely.psu="adjust")
options(survey.adjust.domain.lonely=TRUE)


#Change Traditional to Alternative to analyze Alternative survey data (but only 2009 to present)
```

### 2023 - Analysis

```{r message = FALSE, warning = FALSE, eval=FALSE}

yrbs_master_analysis <- read.xlsx("raw_yrbs_allyears_statewide_trad_cleaned.xlsx")



yrbs_master_analysis <- yrbs_master_analysis %>%
  filter(Survey_Year == 2023,
         School_Type == "Statewide Traditional")



# Get column names that match the pattern
pattern_cols <- names(yrbs_master_analysis)[grepl("^(QN|V).*[RP]", names(yrbs_master_analysis))]

# Define a function to check if a column contains 1 or 2
contains_1_or_2 <- function(column) {
  any(column %in% c(1, 2))
}



# Identify columns to remove
cols_to_remove <- sapply(yrbs_master_analysis[pattern_cols], function(col) !contains_1_or_2(col))
cols_to_remove <- pattern_cols[cols_to_remove]

# Remove the identified columns
yrbs_master_analysis <- select(yrbs_master_analysis, -all_of(cols_to_remove))



# Remove whitespcae
remove_whitespace_from_all_columns <- function(df) {
  df[] <- lapply(df, function(x) {
    if (is.character(x)) {
      return(trimws(x, which = "both"))
    } else {
      return(x)
    }
  })
  return(df)
}



# Apply the function to your dataframe
yrbs_master_analysis <- remove_whitespace_from_all_columns(yrbs_master_analysis)



# Convert variables to numeric
yrbs_master_analysis$Primary_Samp_Unit <- as.numeric(as.character(yrbs_master_analysis$Primary_Samp_Unit))
yrbs_master_analysis$Stratum <- as.numeric(as.character(yrbs_master_analysis$Stratum))
yrbs_master_analysis$Final_Weight <- as.numeric(as.character(yrbs_master_analysis$Final_Weight))



# Now create the survey design object
survey_design <- yrbs_master_analysis %>% 
  as_survey_design(ids = Primary_Samp_Unit,
                   strata = Stratum, 
                   weights = Final_Weight, 
                   nest = TRUE)



#Create Function with Survey Design Object
svy_multi_est_fun <- function(year = NULL,
                              elements = NULL,
                              school_type = NULL,
                              design = NULL) #starts with parameters at null
  {
  survey_design_all_var <- design %>%
    filter(!is.na(get(elements)), #excludes missing values in variables
           Survey_Year == year, #Need to choose surve year.
           School_Type == school_type # Must choose Alternative or Traditional etc 
          ) %>% 
    
    group_by(get(elements)) %>% # group by unique values, what will be in rows
    
    summarize(
      unweighted_numerator_1 = sum(get(elements) == 1, na.rm = TRUE),
      unweighted_numerator_2 = sum(get(elements) == 2, na.rm = TRUE),
      wt.mean = round(survey_mean(proportion = TRUE, # variables are binary
                                  prop_method = 'logit', #logit method/binary
                                  vartype = 'ci'), # confidence intervals
                                  digits = 3), # Round to 3 digits
              ) %>%
   
    # .cols chooses column, ~ mean do it right here, then rename it to "XX"
    rename_with(.cols = 1, ~ "ROI_Indicator_Code") %>% 
   
    # Assigns elements value to every row in column, overwriting value
    mutate(ROI_Indicator_Code = elements)
  
    # constructs the final output of all ROI's into master aggregate data set
    # for a specific district, year, school type specified
    cbind(
          Year = year,
          School_Type = school_type,
          survey_design_all_var)
    
} # This designates the end of the function Loop



# First need to make empty dataframe, will store results from svy_multi_est_fun
all_var_columns <- data.frame()

# Function parameters are currently set to the following. Change for current needs
syear <- 2023  
stype <- "Statewide Traditional" 
 


# This 'for' loop iterates over names of columns in survey_design$variables
# that match a specific pattern: ^(QN|V).*[RP] which will choose the ROI's
for (j in c(names(survey_design$variables %>%
                   select(matches("^(QN|V).*[RP]"))))) 
  {
  all_var_columns = rbind(svy_multi_est_fun( 
                                  year = syear,
                                  school_type = stype,
                                  elements = j, # j for Jared-he created this
                                  design = survey_design), 
                                  all_var_columns)
  } # denotes end of function



# Read the specific sheet from the Excel file
yrbs_masterpiece <- read.xlsx("YRBS Masterpiece.xlsx", sheet = "ROI - All")

# Select necessary columns from the yrbs_masterpiece dataframe
yrbs_masterpiece <- yrbs_masterpiece %>%
  select(ROI_Indicator_Code,
         Health_Topic,
         Indicator_Long_Description
         ) %>%
  sapply(trimws) # Apply trimws function

# Merge the data frames on the specified columns
all_var_columns <- merge(all_var_columns, yrbs_masterpiece, 
                     by.x = "ROI_Indicator_Code",
                     by.y = "ROI_Indicator_Code", 
                     all.x = TRUE) # all.x = TRUE- keep all observations



# Add Denominator by adding count of 1's and 2's, ascending order num total
all_var_columns <- all_var_columns %>%
  group_by(ROI_Indicator_Code) %>%
  mutate(Unweighted_Denominator =
           sum(unweighted_numerator_1 + unweighted_numerator_2)) %>%
  filter(unweighted_numerator_1 != 0) %>%
  select(-unweighted_numerator_2) %>%
  arrange(unweighted_numerator_1)



# Rename columns so they are consistent with previous names used
# Format: New Column Name = Current Column Name
all_var_columns <- all_var_columns %>%
  rename(
    Prevalence_Estimate = wt.mean,
    Confidence_Interval_Low = wt.mean_low,
    Confidence_Interval_High = wt.mean_upp,
    Unweighted_Numerator = unweighted_numerator_1,
    Survey_Year = Year
  )



# Rearrange columns in desired order and organize rest alphabetically
all_var_columns <- all_var_columns %>%
  select(
    Survey_Year,
    School_Type,
    Health_Topic,
    ROI_Indicator_Code,
    Indicator_Long_Description,
    Prevalence_Estimate,
    Confidence_Interval_Low,
    Confidence_Interval_High,
    Unweighted_Numerator,
    Unweighted_Denominator,
    everything()
  )



# Sort by Health_Topic then ROI indicator in ascending order
all_var_columns <- all_var_columns %>% 
  arrange(Health_Topic,
          ROI_Indicator_Code
          )



all_var_columns <- all_var_columns %>%
  mutate(
    Prevalence_Estimate = round(Prevalence_Estimate * 100, 3),
    Confidence_Interval_Low = round(Confidence_Interval_Low * 100, 3),
    Confidence_Interval_High = round(Confidence_Interval_High * 100, 3)
  )



# Calculate the Relative Standard Error (RSE) from the Confidence Interval (CI) using Wald Method
# Here we're assuming a 95% CI, so the multiplier is 1.95. 
# FYI - Coefficient of Variation (CV) and RSE are used interchangeably
all_var_columns <- all_var_columns %>%
  mutate(
    Standard_Error = round((as.numeric(Confidence_Interval_High) - as.numeric(Confidence_Interval_Low)) / (1.95 * 2), 1),
    Relative_Standard_Error = round((Standard_Error / as.numeric(Prevalence_Estimate)) * 100, 1),
    Relative_Standard_Error = ifelse(as.numeric(Prevalence_Estimate) == 0, NA,
                                     Relative_Standard_Error), # Assign NA when 0
    RSE_Flag = case_when(
      Relative_Standard_Error > 50 ~ "Very Unstable", 
      Relative_Standard_Error > 30 ~ "Unstable",     
      TRUE ~ NA_character_)
    ) %>%
  select(-Standard_Error)



#################################### Supression ###############################

suppress_values <- function(df) {
  df %>%
    mutate(
      Unweighted_Numerator = if_else(as.numeric(Unweighted_Numerator) < 5 & !is.na(as.numeric(Unweighted_Numerator)), "Suppressed", as.character(Unweighted_Numerator)),
      Unweighted_Denominator = if_else(as.numeric(Unweighted_Denominator) < 30 & !is.na(as.numeric(Unweighted_Denominator)), "Suppressed", as.character(Unweighted_Denominator)),
      Unweighted_Denominator = if_else(Unweighted_Numerator == "Suppressed", "Suppressed", Unweighted_Denominator),
      Prevalence_Estimate = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Prevalence_Estimate)),
      Confidence_Interval_Low = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_Low)),
      Confidence_Interval_High = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_High)),
      Relative_Standard_Error = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Relative_Standard_Error)),
      RSE_Flag = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(RSE_Flag))
    )
}

# Apply the combined suppression rules
all_var_columns <- suppress_values(all_var_columns)



# head the modified dataframe to the console
head(all_var_columns)


all_var_columns23 <- all_var_columns

```

### 2019 - Analysis

```{r message = FALSE, warning = FALSE, eval=FALSE}

yrbs_master_analysis <- read.xlsx("raw_yrbs_allyears_statewide_trad_cleaned.xlsx")


yrbs_master_analysis <- yrbs_master_analysis %>%
  filter(Survey_Year == 2019,
         School_Type == "Statewide Traditional")


# Get column names that match the pattern
pattern_cols <- names(yrbs_master_analysis)[grepl("^(QN|V).*[RP]", names(yrbs_master_analysis))]

# Define a function to check if a column contains 1 or 2
contains_1_or_2 <- function(column) {
  any(column %in% c(1, 2))
}



# Identify columns to remove
cols_to_remove <- sapply(yrbs_master_analysis[pattern_cols], function(col) !contains_1_or_2(col))
cols_to_remove <- pattern_cols[cols_to_remove]

# Remove the identified columns
yrbs_master_analysis <- select(yrbs_master_analysis, -all_of(cols_to_remove))




# Remove whitespcae
remove_whitespace_from_all_columns <- function(df) {
  df[] <- lapply(df, function(x) {
    if (is.character(x)) {
      return(trimws(x, which = "both"))
    } else {
      return(x)
    }
  })
  return(df)
}

# Apply the function to your dataframe
yrbs_master_analysis <- remove_whitespace_from_all_columns(yrbs_master_analysis)





# For Schools with Cluster Sampling like Anchorage
#Create Survey Design Object
survey_design <- yrbs_master_analysis %>% 
  as_survey_design(ids = Primary_Samp_Unit,
                   #PSU (Cluster) 1st level sampling
                   strata = Stratum, # Strata variable 
                   weights = Final_Weight, # Weighting variable
                   nest = TRUE, # Not nesting stages
                   )



#Create Function with Survey Design Object
svy_multi_est_fun <- function(year = NULL,
                              elements = NULL,
                              school_type = NULL,
                              design = NULL) #starts with parameters at null
  {
  survey_design_all_var <- design %>%
    filter(!is.na(get(elements)), #excludes missing values in variables
           Survey_Year == year, #Need to choose surve year.
           School_Type == school_type # Must choose Alternative or Traditional etc 
          ) %>% 
    
    group_by(get(elements)) %>% # group by unique values, what will be in rows
    
    summarize(
      unweighted_numerator_1 = sum(get(elements) == 1, na.rm = TRUE),
      unweighted_numerator_2 = sum(get(elements) == 2, na.rm = TRUE),
      wt.mean = round(survey_mean(proportion = TRUE, # variables are binary
                                  prop_method = 'logit', #logit method/binary
                                  vartype = 'ci'), # confidence intervals
                                  digits = 3), # Round to 3 digits
              ) %>%
   
    # .cols chooses column, ~ mean do it right here, then rename it to "XX"
    rename_with(.cols = 1, ~ "ROI_Indicator_Code") %>% 
   
    # Assigns elements value to every row in column, overwriting value
    mutate(ROI_Indicator_Code = elements)
  
    # constructs the final output of all ROI's into master aggregate data set
    # for a specific district, year, school type specified
    cbind(
          Year = year,
          School_Type = school_type,
          survey_design_all_var)
    
} # This designates the end of the function Loop



# First need to make empty dataframe, will store results from svy_multi_est_fun
all_var_columns <- data.frame()

# Function parameters are currently set to the following. Change for current needs
syear <- 2019  
stype <- "Statewide Traditional"  
 


# This 'for' loop iterates over names of columns in survey_design$variables
# that match a specific pattern: ^(QN|V).*[RP] which will choose the ROI's
for (j in c(names(survey_design$variables %>%
                   select(matches("^(QN|V).*[RP]"))))) 
  {
  all_var_columns = rbind(svy_multi_est_fun( 
                                  year = syear,
                                  school_type = stype,
                                  elements = j, # j for Jared-he created this
                                  design = survey_design), 
                                  all_var_columns)
  } # denotes end of function

#If it errors above, it is because there are columns of data with no data in it. 
#Go through excel file and delete all columns with no 1's or 2's then re-run.

# See the first 5 rows of the data set
#head(all_var_columns)




# Read the specific sheet from the Excel file
yrbs_masterpiece <- read.xlsx("YRBS Masterpiece.xlsx", sheet = "ROI - All")
# ** In the Master Inventory doc, this name changed **

# Select necessary columns from the yrbs_masterpiece dataframe
yrbs_masterpiece <- yrbs_masterpiece %>%
  select(ROI_Indicator_Code,
         Health_Topic,
         Indicator_Long_Description
         ) %>%
  sapply(trimws)

# Merge the data frames on the specified columns
all_var_columns <- merge(all_var_columns, yrbs_masterpiece, 
                     by.x = "ROI_Indicator_Code",
                     by.y = "ROI_Indicator_Code", 
                     all.x = TRUE) # all.x = TRUE- keep all observations

# Check the first few rows of the merged data frame
#head(all_var_columns)

# Sometimes the names of the columns aren't what they seem
# so check if not working
#colnames(all_var_columns)




# Add Denominator by adding count of 1's and 2's, ascending order num total
all_var_columns <- all_var_columns %>%
  group_by(ROI_Indicator_Code) %>%
  mutate(Unweighted_Denominator =
           sum(unweighted_numerator_1 + unweighted_numerator_2)) %>%
  filter(unweighted_numerator_1 != 0) %>%
  select(-unweighted_numerator_2) %>%
  arrange(unweighted_numerator_1)

#head(all_var_columns)



# Rename columns so they are consistent with previous names used
# Format: New Column Name = Current Column Name

#colnames(all_var_columns)

# Rename the columns
all_var_columns <- all_var_columns %>%
  rename(
    Prevalence_Estimate = wt.mean,
    Confidence_Interval_Low = wt.mean_low,
    Confidence_Interval_High = wt.mean_upp,
    Unweighted_Numerator = unweighted_numerator_1,
    Survey_Year = Year
  )

# Rearrange columns in desired order and organize rest alphabetically
all_var_columns <- all_var_columns %>%
  select(
    Survey_Year,
    School_Type,
    Health_Topic,
    ROI_Indicator_Code,
    Indicator_Long_Description,
    Prevalence_Estimate,
    Confidence_Interval_Low,
    Confidence_Interval_High,
    Unweighted_Numerator,
    Unweighted_Denominator,
    everything()
  )

# Sort by Health_Topic then ROI indicator in ascending order
all_var_columns <- all_var_columns %>% 
  arrange(Health_Topic,
          ROI_Indicator_Code
          )

all_var_columns <- all_var_columns %>%
  mutate(
    Prevalence_Estimate = round(Prevalence_Estimate * 100, 3),
    Confidence_Interval_Low = round(Confidence_Interval_Low * 100, 3),
    Confidence_Interval_High = round(Confidence_Interval_High * 100, 3)
  )



# Calculate the Relative Standard Error (RSE) from the Confidence Interval (CI)
# Here we're assuming a 95% CI, so the multiplier is 1.95. 
# FYI - Coefficient of Variation (CV) and RSE are used interchangeably when
# used to calculate 
all_var_columns <- all_var_columns %>%
  mutate(
    Standard_Error = round((as.numeric(Confidence_Interval_High) - as.numeric(Confidence_Interval_Low)) / (1.95 * 2), 1),
    Relative_Standard_Error = round((Standard_Error / as.numeric(Prevalence_Estimate)) * 100, 1),
    Relative_Standard_Error = ifelse(as.numeric(Prevalence_Estimate) == 0, NA,
                                     Relative_Standard_Error), # Assign NA when 0
    RSE_Flag = case_when(
      Relative_Standard_Error > 50 ~ "Very Unstable", 
      Relative_Standard_Error > 30 ~ "Unstable",     
      TRUE ~ NA_character_)
    ) %>%
  select(-Standard_Error)



#################################### Supression ###############################

suppress_values <- function(df) {
  df %>%
    mutate(
      Unweighted_Numerator = if_else(as.numeric(Unweighted_Numerator) < 5 & !is.na(as.numeric(Unweighted_Numerator)), "Suppressed", as.character(Unweighted_Numerator)),
      Unweighted_Denominator = if_else(as.numeric(Unweighted_Denominator) < 30 & !is.na(as.numeric(Unweighted_Denominator)), "Suppressed", as.character(Unweighted_Denominator)),
      Unweighted_Denominator = if_else(Unweighted_Numerator == "Suppressed", "Suppressed", Unweighted_Denominator),
      Prevalence_Estimate = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Prevalence_Estimate)),
      Confidence_Interval_Low = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_Low)),
      Confidence_Interval_High = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_High)),
      Relative_Standard_Error = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Relative_Standard_Error)),
      RSE_Flag = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(RSE_Flag))
    )
}

# Apply the combined suppression rules
all_var_columns <- suppress_values(all_var_columns)



# head the modified dataframe to the console
head(all_var_columns)


all_var_columns19 <- all_var_columns

```

### 2017 - Analysis

```{r message = FALSE, warning = FALSE, eval=FALSE}
yrbs_master_analysis <- read.xlsx("raw_yrbs_allyears_statewide_trad_cleaned.xlsx")

yrbs_master_analysis <- yrbs_master_analysis %>%
  filter(Survey_Year == 2017,
         School_Type == "Statewide Traditional")



# Get column names that match the pattern
pattern_cols <- names(yrbs_master_analysis)[grepl("^(QN|V).*[RP]", names(yrbs_master_analysis))]

# Define a function to check if a column contains 1 or 2
contains_1_or_2 <- function(column) {
  any(column %in% c(1, 2))
}



# Identify columns to remove
cols_to_remove <- sapply(yrbs_master_analysis[pattern_cols], function(col) !contains_1_or_2(col))
cols_to_remove <- pattern_cols[cols_to_remove]

# Remove the identified columns
yrbs_master_analysis <- select(yrbs_master_analysis, -all_of(cols_to_remove))



# Remove whitespcae
remove_whitespace_from_all_columns <- function(df) {
  df[] <- lapply(df, function(x) {
    if (is.character(x)) {
      return(trimws(x, which = "both"))
    } else {
      return(x)
    }
  })
  return(df)
}

# Apply the function to your dataframe
yrbs_master_analysis <- remove_whitespace_from_all_columns(yrbs_master_analysis)



# For Schools with Cluster Sampling like Anchorage
#Create Survey Design Object
survey_design <- yrbs_master_analysis %>% 
  as_survey_design(ids = Primary_Samp_Unit,
                   #PSU (Cluster) 1st level sampling
                   strata = Stratum, # Strata variable 
                   weights = Final_Weight, # Weighting variable
                   nest = TRUE, # Not nesting stages
                   )


#Create Function with Survey Design Object
svy_multi_est_fun <- function(year = NULL,
                              elements = NULL,
                              school_type = NULL,
                              design = NULL) #starts with parameters at null
  {
  survey_design_all_var <- design %>%
    filter(!is.na(get(elements)), #excludes missing values in variables
           Survey_Year == year, #Need to choose surve year.
           School_Type == school_type # Must choose Alternative or Traditional etc 
          ) %>% 
    
    group_by(get(elements)) %>% # group by unique values, what will be in rows
    
    summarize(
      unweighted_numerator_1 = sum(get(elements) == 1, na.rm = TRUE),
      unweighted_numerator_2 = sum(get(elements) == 2, na.rm = TRUE),
      wt.mean = round(survey_mean(proportion = TRUE, # variables are binary
                                  prop_method = 'logit', #logit method/binary
                                  vartype = 'ci'), # confidence intervals
                                  digits = 3), # Round to 3 digits
              ) %>%
   
    # .cols chooses column, ~ mean do it right here, then rename it to "XX"
    rename_with(.cols = 1, ~ "ROI_Indicator_Code") %>% 
   
    # Assigns elements value to every row in column, overwriting value
    mutate(ROI_Indicator_Code = elements)
  
    # constructs the final output of all ROI's into master aggregate data set
    # for a specific district, year, school type specified
    cbind(
          Year = year,
          School_Type = school_type,
          survey_design_all_var)
    
} # This designates the end of the function Loop



# First need to make empty dataframe, will store results from svy_multi_est_fun
all_var_columns <- data.frame()

# Function parameters are currently set to the following. Change for current needs
syear <- 2017  
stype <- "Statewide Traditional"  
 



# This 'for' loop iterates over names of columns in survey_design$variables
# that match a specific pattern: ^(QN|V).*[RP] which will choose the ROI's
for (j in c(names(survey_design$variables %>%
                   select(matches("^(QN|V).*[RP]"))))) 
  {
  all_var_columns = rbind(svy_multi_est_fun( 
                                  year = syear,
                                  school_type = stype,
                                  elements = j, # j for Jared-he created this
                                  design = survey_design), 
                                  all_var_columns)
  } # denotes end of function

#If it errors above, it is because there are columns of data with no data in it. 
#Go through excel file and delete all columns with no 1's or 2's then re-run.

# See the first 5 rows of the data set
head(all_var_columns)




# Read the specific sheet from the Excel file
yrbs_masterpiece <- read.xlsx("YRBS Masterpiece.xlsx", sheet = "ROI - All")
# ** In the Master Inventory doc, this name changed **

# Select necessary columns from the yrbs_masterpiece dataframe
yrbs_masterpiece <- yrbs_masterpiece %>%
  select(ROI_Indicator_Code,
         Health_Topic,
         Indicator_Long_Description
         ) %>%
  sapply(trimws)

# Merge the data frames on the specified columns
all_var_columns <- merge(all_var_columns, yrbs_masterpiece, 
                     by.x = "ROI_Indicator_Code",
                     by.y = "ROI_Indicator_Code", 
                     all.x = TRUE) # all.x = TRUE- keep all observations

# Check the first few rows of the merged data frame
head(all_var_columns)



# Add Denominator by adding count of 1's and 2's, ascending order num total
all_var_columns <- all_var_columns %>%
  group_by(ROI_Indicator_Code) %>%
  mutate(Unweighted_Denominator =
           sum(unweighted_numerator_1 + unweighted_numerator_2)) %>%
  filter(unweighted_numerator_1 != 0) %>%
  select(-unweighted_numerator_2) %>%
  arrange(unweighted_numerator_1)

head(all_var_columns)



# Rename the columns
all_var_columns <- all_var_columns %>%
  rename(
    Prevalence_Estimate = wt.mean,
    Confidence_Interval_Low = wt.mean_low,
    Confidence_Interval_High = wt.mean_upp,
    Unweighted_Numerator = unweighted_numerator_1,
    Survey_Year = Year
  )



# Rearrange columns in desired order and organize rest alphabetically
all_var_columns <- all_var_columns %>%
  select(
    Survey_Year,
    School_Type,
    Health_Topic,
    ROI_Indicator_Code,
    Indicator_Long_Description,
    Prevalence_Estimate,
    Confidence_Interval_Low,
    Confidence_Interval_High,
    Unweighted_Numerator,
    Unweighted_Denominator,
    everything()
  )



# Sort by Health_Topic then ROI indicator in ascending order
all_var_columns <- all_var_columns %>% 
  arrange(Health_Topic,
          ROI_Indicator_Code
          )

all_var_columns <- all_var_columns %>%
  mutate(
    Prevalence_Estimate = round(Prevalence_Estimate * 100, 3),
    Confidence_Interval_Low = round(Confidence_Interval_Low * 100, 3),
    Confidence_Interval_High = round(Confidence_Interval_High * 100, 3)
  )


# View changes to see if code worked as anticipated
head(all_var_columns)



# Calculate the Relative Standard Error (RSE) from the Confidence Interval (CI)
# Here we're assuming a 95% CI, so the multiplier is 1.95. 
# FYI - Coefficient of Variation (CV) and RSE are used interchangeably when
# used to calculate 
all_var_columns <- all_var_columns %>%
  mutate(
    Standard_Error = round((as.numeric(Confidence_Interval_High) - as.numeric(Confidence_Interval_Low)) / (1.95 * 2), 1),
    Relative_Standard_Error = round((Standard_Error / as.numeric(Prevalence_Estimate)) * 100, 1),
    Relative_Standard_Error = ifelse(as.numeric(Prevalence_Estimate) == 0, NA,
                                     Relative_Standard_Error), # Assign NA when 0
    RSE_Flag = case_when(
      Relative_Standard_Error > 50 ~ "Very Unstable", 
      Relative_Standard_Error > 30 ~ "Unstable",     
      TRUE ~ NA_character_)
    ) %>%
  select(-Standard_Error)



#################################### Supression ###############################

suppress_values <- function(df) {
  df %>%
    mutate(
      Unweighted_Numerator = if_else(as.numeric(Unweighted_Numerator) < 5 & !is.na(as.numeric(Unweighted_Numerator)), "Suppressed", as.character(Unweighted_Numerator)),
      Unweighted_Denominator = if_else(as.numeric(Unweighted_Denominator) < 30 & !is.na(as.numeric(Unweighted_Denominator)), "Suppressed", as.character(Unweighted_Denominator)),
      Unweighted_Denominator = if_else(Unweighted_Numerator == "Suppressed", "Suppressed", Unweighted_Denominator),
      Prevalence_Estimate = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Prevalence_Estimate)),
      Confidence_Interval_Low = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_Low)),
      Confidence_Interval_High = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_High)),
      Relative_Standard_Error = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Relative_Standard_Error)),
      RSE_Flag = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(RSE_Flag))
    )
}

# Apply the combined suppression rules
all_var_columns <- suppress_values(all_var_columns)



# head the modified dataframe to the console
head(all_var_columns)


all_var_columns17 <- all_var_columns
```

### 2015 - Analysis

```{r message = FALSE, warning = FALSE, eval=FALSE}

yrbs_master_analysis <- read.xlsx("raw_yrbs_allyears_statewide_trad_cleaned.xlsx")


yrbs_master_analysis <- yrbs_master_analysis %>%
  filter(Survey_Year == 2015,
         School_Type == "Statewide Traditional")



# Get column names that match the pattern
pattern_cols <- names(yrbs_master_analysis)[grepl("^(QN|V).*[RP]", names(yrbs_master_analysis))]

# Define a function to check if a column contains 1 or 2
contains_1_or_2 <- function(column) {
  any(column %in% c(1, 2))
}

# Identify columns to remove
cols_to_remove <- sapply(yrbs_master_analysis[pattern_cols], function(col) !contains_1_or_2(col))
cols_to_remove <- pattern_cols[cols_to_remove]

# Remove the identified columns
yrbs_master_analysis <- select(yrbs_master_analysis, -all_of(cols_to_remove))

# Remove whitespcae
remove_whitespace_from_all_columns <- function(df) {
  df[] <- lapply(df, function(x) {
    if (is.character(x)) {
      return(trimws(x, which = "both"))
    } else {
      return(x)
    }
  })
  return(df)
}

# Apply the function to your dataframe
yrbs_master_analysis <- remove_whitespace_from_all_columns(yrbs_master_analysis)



# For Schools with Cluster Sampling like Anchorage
#Create Survey Design Object
survey_design <- yrbs_master_analysis %>% 
  as_survey_design(ids = Primary_Samp_Unit,
                   #PSU (Cluster) 1st level sampling
                   strata = Stratum, # Strata variable 
                   weights = Final_Weight, # Weighting variable
                   nest = TRUE, # Not nesting stages
                   )



#Create Function with Survey Design Object
svy_multi_est_fun <- function(year = NULL,
                              elements = NULL,
                              school_type = NULL,
                              design = NULL) #starts with parameters at null
  {
  survey_design_all_var <- design %>%
    filter(!is.na(get(elements)), #excludes missing values in variables
           Survey_Year == year, #Need to choose surve year.
           School_Type == school_type # Must choose Alternative or Traditional etc 
          ) %>% 
    
    group_by(get(elements)) %>% # group by unique values, what will be in rows
    
    summarize(
      unweighted_numerator_1 = sum(get(elements) == 1, na.rm = TRUE),
      unweighted_numerator_2 = sum(get(elements) == 2, na.rm = TRUE),
      wt.mean = round(survey_mean(proportion = TRUE, # variables are binary
                                  prop_method = 'logit', #logit method/binary
                                  vartype = 'ci'), # confidence intervals
                                  digits = 3), # Round to 3 digits
              ) %>%
   
    # .cols chooses column, ~ mean do it right here, then rename it to "XX"
    rename_with(.cols = 1, ~ "ROI_Indicator_Code") %>% 
   
    # Assigns elements value to every row in column, overwriting value
    mutate(ROI_Indicator_Code = elements)
  
    # constructs the final output of all ROI's into master aggregate data set
    # for a specific district, year, school type specified
    cbind(
          Year = year,
          School_Type = school_type,
          survey_design_all_var)
    
} # This designates the end of the function Loop



# First need to make empty dataframe, will store results from svy_multi_est_fun
all_var_columns <- data.frame()

# Function parameters are currently set to the following. Change for current needs
syear <- 2015  
stype <- "Statewide Traditional"  
 



# This 'for' loop iterates over names of columns in survey_design$variables
# that match a specific pattern: ^(QN|V).*[RP] which will choose the ROI's
for (j in c(names(survey_design$variables %>%
                   select(matches("^(QN|V).*[RP]"))))) 
  {
  all_var_columns = rbind(svy_multi_est_fun( 
                                  year = syear,
                                  school_type = stype,
                                  elements = j, # j for Jared-he created this
                                  design = survey_design), 
                                  all_var_columns)
  } # denotes end of function

#If it errors above, it is because there are columns of data with no data in it. 
#Go through excel file and delete all columns with no 1's or 2's then re-run.

# See the first 5 rows of the data set
head(all_var_columns)




# Read the specific sheet from the Excel file
yrbs_masterpiece <- read.xlsx("YRBS Masterpiece.xlsx", sheet = "ROI - All")

# Select necessary columns from the yrbs_masterpiece dataframe
yrbs_masterpiece <- yrbs_masterpiece %>%
  select(ROI_Indicator_Code,
         Health_Topic,
         Indicator_Long_Description
        ) %>%
  sapply(trimws)

# Merge the data frames on the specified columns
all_var_columns <- merge(all_var_columns, yrbs_masterpiece, 
                     by.x = "ROI_Indicator_Code",
                     by.y = "ROI_Indicator_Code", 
                     all.x = TRUE) # all.x = TRUE- keep all observations

# Check the first few rows of the merged data frame
head(all_var_columns)



# Add Denominator by adding count of 1's and 2's, ascending order num total
all_var_columns <- all_var_columns %>%
  group_by(ROI_Indicator_Code) %>%
  mutate(Unweighted_Denominator =
           sum(unweighted_numerator_1 + unweighted_numerator_2)) %>%
  filter(unweighted_numerator_1 != 0) %>%
  select(-unweighted_numerator_2) %>%
  arrange(unweighted_numerator_1)

head(all_var_columns)



# Rename the columns
all_var_columns <- all_var_columns %>%
  rename(
    Prevalence_Estimate = wt.mean,
    Confidence_Interval_Low = wt.mean_low,
    Confidence_Interval_High = wt.mean_upp,
    Unweighted_Numerator = unweighted_numerator_1,
    Survey_Year = Year
  )



# Rearrange columns in desired order and organize rest alphabetically
all_var_columns <- all_var_columns %>%
  select(
    Survey_Year,
    School_Type,
    Health_Topic,
    ROI_Indicator_Code,
    Indicator_Long_Description,
    Prevalence_Estimate,
    Confidence_Interval_Low,
    Confidence_Interval_High,
    Unweighted_Numerator,
    Unweighted_Denominator,
    everything()
  )

# Sort by Health_Topic then ROI indicator in ascending order
all_var_columns <- all_var_columns %>% 
  arrange(Health_Topic,
          ROI_Indicator_Code
          )

all_var_columns <- all_var_columns %>%
  mutate(
    Prevalence_Estimate = round(Prevalence_Estimate * 100, 3),
    Confidence_Interval_Low = round(Confidence_Interval_Low * 100, 3),
    Confidence_Interval_High = round(Confidence_Interval_High * 100, 3)
  )



# Calculate the Relative Standard Error (RSE) from the Confidence Interval (CI)
# Here we're assuming a 95% CI, so the multiplier is 1.95. 
# FYI - Coefficient of Variation (CV) and RSE are used interchangeably when
# used to calculate 
all_var_columns <- all_var_columns %>%
  mutate(
    Standard_Error = round((as.numeric(Confidence_Interval_High) - as.numeric(Confidence_Interval_Low)) / (1.95 * 2), 1),
    Relative_Standard_Error = round((Standard_Error / as.numeric(Prevalence_Estimate)) * 100, 1),
    Relative_Standard_Error = ifelse(as.numeric(Prevalence_Estimate) == 0, NA,
                                     Relative_Standard_Error), # Assign NA when 0
    RSE_Flag = case_when(
      Relative_Standard_Error > 50 ~ "Very Unstable", 
      Relative_Standard_Error > 30 ~ "Unstable",     
      TRUE ~ NA_character_)
    ) %>%
  select(-Standard_Error)



#################################### Supression ###############################

suppress_values <- function(df) {
  df %>%
    mutate(
      Unweighted_Numerator = if_else(as.numeric(Unweighted_Numerator) < 5 & !is.na(as.numeric(Unweighted_Numerator)), "Suppressed", as.character(Unweighted_Numerator)),
      Unweighted_Denominator = if_else(as.numeric(Unweighted_Denominator) < 30 & !is.na(as.numeric(Unweighted_Denominator)), "Suppressed", as.character(Unweighted_Denominator)),
      Unweighted_Denominator = if_else(Unweighted_Numerator == "Suppressed", "Suppressed", Unweighted_Denominator),
      Prevalence_Estimate = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Prevalence_Estimate)),
      Confidence_Interval_Low = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_Low)),
      Confidence_Interval_High = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_High)),
      Relative_Standard_Error = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Relative_Standard_Error)),
      RSE_Flag = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(RSE_Flag))
    )
}

# Apply the combined suppression rules
all_var_columns <- suppress_values(all_var_columns)





# head the modified dataframe to the console
head(all_var_columns)



all_var_columns15 <- all_var_columns
```

### 2013 - Analysis

```{r message = FALSE, warning = FALSE, eval=FALSE}

yrbs_master_analysis <- read.xlsx("raw_yrbs_allyears_statewide_trad_cleaned.xlsx")



yrbs_master_analysis <- yrbs_master_analysis %>%
  filter(Survey_Year == 2013,
         School_Type == "Statewide Traditional")



# Get column names that match the pattern
pattern_cols <- names(yrbs_master_analysis)[grepl("^(QN|V).*[RP]", names(yrbs_master_analysis))]

# Define a function to check if a column contains 1 or 2
contains_1_or_2 <- function(column) {
  any(column %in% c(1, 2))
}



# Identify columns to remove
cols_to_remove <- sapply(yrbs_master_analysis[pattern_cols], function(col) !contains_1_or_2(col))
cols_to_remove <- pattern_cols[cols_to_remove]

# Remove the identified columns
yrbs_master_analysis <- select(yrbs_master_analysis, -all_of(cols_to_remove))

# Remove whitespcae
remove_whitespace_from_all_columns <- function(df) {
  df[] <- lapply(df, function(x) {
    if (is.character(x)) {
      return(trimws(x, which = "both"))
    } else {
      return(x)
    }
  })
  return(df)
}

# Apply the function to your dataframe
yrbs_master_analysis <- remove_whitespace_from_all_columns(yrbs_master_analysis)



# For Schools with Cluster Sampling like Anchorage
#Create Survey Design Object
survey_design <- yrbs_master_analysis %>% 
  as_survey_design(ids = Primary_Samp_Unit,
                   #PSU (Cluster) 1st level sampling
                   strata = Stratum, # Strata variable 
                   weights = Final_Weight, # Weighting variable
                   nest = TRUE, # Not nesting stages
                   )


#Create Function with Survey Design Object
svy_multi_est_fun <- function(year = NULL,
                              elements = NULL,
                              school_type = NULL,
                              design = NULL) #starts with parameters at null
  {
  survey_design_all_var <- design %>%
    filter(!is.na(get(elements)), #excludes missing values in variables
           Survey_Year == year, #Need to choose surve year.
           School_Type == school_type # Must choose Alternative or Traditional etc 
          ) %>% 
    
    group_by(get(elements)) %>% # group by unique values, what will be in rows
    
    summarize(
      unweighted_numerator_1 = sum(get(elements) == 1, na.rm = TRUE),
      unweighted_numerator_2 = sum(get(elements) == 2, na.rm = TRUE),
      wt.mean = round(survey_mean(proportion = TRUE, # variables are binary
                                  prop_method = 'logit', #logit method/binary
                                  vartype = 'ci'), # confidence intervals
                                  digits = 3), # Round to 3 digits
              ) %>%
   
    # .cols chooses column, ~ mean do it right here, then rename it to "XX"
    rename_with(.cols = 1, ~ "ROI_Indicator_Code") %>% 
   
    # Assigns elements value to every row in column, overwriting value
    mutate(ROI_Indicator_Code = elements)
  
    # constructs the final output of all ROI's into master aggregate data set
    # for a specific district, year, school type specified
    cbind(
          Year = year,
          School_Type = school_type,
          survey_design_all_var)
    
} # This designates the end of the function Loop



# First need to make empty dataframe, will store results from svy_multi_est_fun
all_var_columns <- data.frame()

# Function parameters are currently set to the following. Change for current needs
syear <- 2013  
stype <- "Statewide Traditional"  
 



# This 'for' loop iterates over names of columns in survey_design$variables
# that match a specific pattern: ^(QN|V).*[RP] which will choose the ROI's
for (j in c(names(survey_design$variables %>%
                   select(matches("^(QN|V).*[RP]"))))) 
  {
  all_var_columns = rbind(svy_multi_est_fun( 
                                  year = syear,
                                  school_type = stype,
                                  elements = j, # j for Jared-he created this
                                  design = survey_design), 
                                  all_var_columns)
  } # denotes end of function

#If it errors above, it is because there are columns of data with no data in it. 
#Go through excel file and delete all columns with no 1's or 2's then re-run.

# See the first 5 rows of the data set
head(all_var_columns)




# Read the specific sheet from the Excel file
yrbs_masterpiece <- read.xlsx("YRBS Masterpiece.xlsx", sheet = "ROI - All")
# ** In the Master Inventory doc, this name changed **

# Select necessary columns from the yrbs_masterpiece dataframe
yrbs_masterpiece <- yrbs_masterpiece %>%
  select(ROI_Indicator_Code,
         Health_Topic,
         Indicator_Long_Description
         ) %>%
  sapply(trimws)

# Merge the data frames on the specified columns
all_var_columns <- merge(all_var_columns, yrbs_masterpiece, 
                     by.x = "ROI_Indicator_Code",
                     by.y = "ROI_Indicator_Code", 
                     all.x = TRUE) # all.x = TRUE- keep all observations

# Check the first few rows of the merged data frame
head(all_var_columns)



# Add Denominator by adding count of 1's and 2's, ascending order num total
all_var_columns <- all_var_columns %>%
  group_by(ROI_Indicator_Code) %>%
  mutate(Unweighted_Denominator =
           sum(unweighted_numerator_1 + unweighted_numerator_2)) %>%
  filter(unweighted_numerator_1 != 0) %>%
  select(-unweighted_numerator_2) %>%
  arrange(unweighted_numerator_1)

head(all_var_columns)



# Rename the columns
all_var_columns <- all_var_columns %>%
  rename(
    Prevalence_Estimate = wt.mean,
    Confidence_Interval_Low = wt.mean_low,
    Confidence_Interval_High = wt.mean_upp,
    Unweighted_Numerator = unweighted_numerator_1,
    Survey_Year = Year
  )



# Rearrange columns in desired order and organize rest alphabetically
all_var_columns <- all_var_columns %>%
  select(
    Survey_Year,
    School_Type,
    Health_Topic,
    ROI_Indicator_Code,
    Indicator_Long_Description,
    Prevalence_Estimate,
    Confidence_Interval_Low,
    Confidence_Interval_High,
    Unweighted_Numerator,
    Unweighted_Denominator,
    everything()
  )

# Sort by Health_Topic then ROI indicator in ascending order
all_var_columns <- all_var_columns %>% 
  arrange(Health_Topic,
          ROI_Indicator_Code
          )

all_var_columns <- all_var_columns %>%
  mutate(
    Prevalence_Estimate = round(Prevalence_Estimate * 100, 3),
    Confidence_Interval_Low = round(Confidence_Interval_Low * 100, 3),
    Confidence_Interval_High = round(Confidence_Interval_High * 100, 3)
  )



# Calculate the Relative Standard Error (RSE) from the Confidence Interval (CI)
# Here we're assuming a 95% CI, so the multiplier is 1.95. 
# FYI - Coefficient of Variation (CV) and RSE are used interchangeably when
# used to calculate 
all_var_columns <- all_var_columns %>%
  mutate(
    Standard_Error = round((as.numeric(Confidence_Interval_High) - as.numeric(Confidence_Interval_Low)) / (1.95 * 2), 1),
    Relative_Standard_Error = round((Standard_Error / as.numeric(Prevalence_Estimate)) * 100, 1),
    Relative_Standard_Error = ifelse(as.numeric(Prevalence_Estimate) == 0, NA,
                                     Relative_Standard_Error), # Assign NA when 0
    RSE_Flag = case_when(
      Relative_Standard_Error > 50 ~ "Very Unstable", 
      Relative_Standard_Error > 30 ~ "Unstable",     
      TRUE ~ NA_character_)
    ) %>%
  select(-Standard_Error)



#################################### Supression ###############################

suppress_values <- function(df) {
  df %>%
    mutate(
      Unweighted_Numerator = if_else(as.numeric(Unweighted_Numerator) < 5 & !is.na(as.numeric(Unweighted_Numerator)), "Suppressed", as.character(Unweighted_Numerator)),
      Unweighted_Denominator = if_else(as.numeric(Unweighted_Denominator) < 30 & !is.na(as.numeric(Unweighted_Denominator)), "Suppressed", as.character(Unweighted_Denominator)),
      Unweighted_Denominator = if_else(Unweighted_Numerator == "Suppressed", "Suppressed", Unweighted_Denominator),
      Prevalence_Estimate = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Prevalence_Estimate)),
      Confidence_Interval_Low = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_Low)),
      Confidence_Interval_High = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_High)),
      Relative_Standard_Error = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Relative_Standard_Error)),
      RSE_Flag = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(RSE_Flag))
    )
}

# Apply the combined suppression rules
all_var_columns <- suppress_values(all_var_columns)

 

# head the modified dataframe to the console
head(all_var_columns)



all_var_columns13 <- all_var_columns

```

### 2011 - Analysis

```{r message = FALSE, warning = FALSE, eval=FALSE}

yrbs_master_analysis <- read.xlsx("raw_yrbs_allyears_statewide_trad_cleaned.xlsx")


yrbs_master_analysis <- yrbs_master_analysis %>%
  filter(Survey_Year == 2011,
         School_Type == "Statewide Traditional")



# Get column names that match the pattern
pattern_cols <- names(yrbs_master_analysis)[grepl("^(QN|V).*[RP]", names(yrbs_master_analysis))]

# Define a function to check if a column contains 1 or 2
contains_1_or_2 <- function(column) {
  any(column %in% c(1, 2))
}



# Identify columns to remove
cols_to_remove <- sapply(yrbs_master_analysis[pattern_cols], function(col) !contains_1_or_2(col))
cols_to_remove <- pattern_cols[cols_to_remove]

# Remove the identified columns
yrbs_master_analysis <- select(yrbs_master_analysis, -all_of(cols_to_remove))

# Remove whitespcae
remove_whitespace_from_all_columns <- function(df) {
  df[] <- lapply(df, function(x) {
    if (is.character(x)) {
      return(trimws(x, which = "both"))
    } else {
      return(x)
    }
  })
  return(df)
}

# Apply the function to your dataframe
yrbs_master_analysis <- remove_whitespace_from_all_columns(yrbs_master_analysis)



# For Schools with Cluster Sampling like Anchorage
#Create Survey Design Object
survey_design <- yrbs_master_analysis %>% 
  as_survey_design(ids = Primary_Samp_Unit,
                   #PSU (Cluster) 1st level sampling
                   strata = Stratum, # Strata variable 
                   weights = Final_Weight, # Weighting variable
                   nest = TRUE, # Not nesting stages
                   )


#Create Function with Survey Design Object
svy_multi_est_fun <- function(year = NULL,
                              elements = NULL,
                              school_type = NULL,
                              design = NULL) #starts with parameters at null
  {
  survey_design_all_var <- design %>%
    filter(!is.na(get(elements)), #excludes missing values in variables
           Survey_Year == year, #Need to choose surve year.
           School_Type == school_type # Must choose Alternative or Traditional etc 
          ) %>% 
    
    group_by(get(elements)) %>% # group by unique values, what will be in rows
    
    summarize(
      unweighted_numerator_1 = sum(get(elements) == 1, na.rm = TRUE),
      unweighted_numerator_2 = sum(get(elements) == 2, na.rm = TRUE),
      wt.mean = round(survey_mean(proportion = TRUE, # variables are binary
                                  prop_method = 'logit', #logit method/binary
                                  vartype = 'ci'), # confidence intervals
                                  digits = 3), # Round to 3 digits
              ) %>%
   
    # .cols chooses column, ~ mean do it right here, then rename it to "XX"
    rename_with(.cols = 1, ~ "ROI_Indicator_Code") %>% 
   
    # Assigns elements value to every row in column, overwriting value
    mutate(ROI_Indicator_Code = elements)
  
    # constructs the final output of all ROI's into master aggregate data set
    # for a specific district, year, school type specified
    cbind(
          Year = year,
          School_Type = school_type,
          survey_design_all_var)
    
} # This designates the end of the function Loop



# First need to make empty dataframe, will store results from svy_multi_est_fun
all_var_columns <- data.frame()

# Function parameters are currently set to the following. Change for current needs
syear <- 2011  
stype <- "Statewide Traditional"  
 



# This 'for' loop iterates over names of columns in survey_design$variables
# that match a specific pattern: ^(QN|V).*[RP] which will choose the ROI's
for (j in c(names(survey_design$variables %>%
                   select(matches("^(QN|V).*[RP]"))))) 
  {
  all_var_columns = rbind(svy_multi_est_fun( 
                                  year = syear,
                                  school_type = stype,
                                  elements = j, # j for Jared-he created this
                                  design = survey_design), 
                                  all_var_columns)
  } # denotes end of function

#If it errors above, it is because there are columns of data with no data in it. 
#Go through excel file and delete all columns with no 1's or 2's then re-run.

# See the first 5 rows of the data set
head(all_var_columns)



# Read the specific sheet from the Excel file
yrbs_masterpiece <- read.xlsx("YRBS Masterpiece.xlsx", sheet = "ROI - All")
# ** In the Master Inventory doc, this name changed **

# Select necessary columns from the yrbs_masterpiece dataframe
yrbs_masterpiece <- yrbs_masterpiece %>%
  select(ROI_Indicator_Code,
         Health_Topic,
         Indicator_Long_Description
         ) %>%
  sapply(trimws)

# Merge the data frames on the specified columns
all_var_columns <- merge(all_var_columns, yrbs_masterpiece, 
                     by.x = "ROI_Indicator_Code",
                     by.y = "ROI_Indicator_Code", 
                     all.x = TRUE) # all.x = TRUE- keep all observations

# Check the first few rows of the merged data frame
head(all_var_columns)



# Add Denominator by adding count of 1's and 2's, ascending order num total
all_var_columns <- all_var_columns %>%
  group_by(ROI_Indicator_Code) %>%
  mutate(Unweighted_Denominator =
           sum(unweighted_numerator_1 + unweighted_numerator_2)) %>%
  filter(unweighted_numerator_1 != 0) %>%
  select(-unweighted_numerator_2) %>%
  arrange(unweighted_numerator_1)

head(all_var_columns)



# Rename the columns
all_var_columns <- all_var_columns %>%
  rename(
    Prevalence_Estimate = wt.mean,
    Confidence_Interval_Low = wt.mean_low,
    Confidence_Interval_High = wt.mean_upp,
    Unweighted_Numerator = unweighted_numerator_1,
    Survey_Year = Year
  )



# Rearrange columns in desired order and organize rest alphabetically
all_var_columns <- all_var_columns %>%
  select(
    Survey_Year,
    School_Type,
    Health_Topic,
    ROI_Indicator_Code,
    Indicator_Long_Description,
    Prevalence_Estimate,
    Confidence_Interval_Low,
    Confidence_Interval_High,
    Unweighted_Numerator,
    Unweighted_Denominator,
    everything()
  )

# Sort by Health_Topic then ROI indicator in ascending order
all_var_columns <- all_var_columns %>% 
  arrange(Health_Topic,
          ROI_Indicator_Code
          )

all_var_columns <- all_var_columns %>%
  mutate(
    Prevalence_Estimate = round(Prevalence_Estimate * 100, 3),
    Confidence_Interval_Low = round(Confidence_Interval_Low * 100, 3),
    Confidence_Interval_High = round(Confidence_Interval_High * 100, 3)
  )



# Calculate the Relative Standard Error (RSE) from the Confidence Interval (CI)
# Here we're assuming a 95% CI, so the multiplier is 1.95. 
# FYI - Coefficient of Variation (CV) and RSE are used interchangeably when
# used to calculate 
all_var_columns <- all_var_columns %>%
  mutate(
    Standard_Error = round((as.numeric(Confidence_Interval_High) - as.numeric(Confidence_Interval_Low)) / (1.95 * 2), 1),
    Relative_Standard_Error = round((Standard_Error / as.numeric(Prevalence_Estimate)) * 100, 1),
    Relative_Standard_Error = ifelse(as.numeric(Prevalence_Estimate) == 0, NA,
                                     Relative_Standard_Error), # Assign NA when 0
    RSE_Flag = case_when(
      Relative_Standard_Error > 50 ~ "Very Unstable", 
      Relative_Standard_Error > 30 ~ "Unstable",     
      TRUE ~ NA_character_)
    ) %>%
  select(-Standard_Error)



#################################### Supression ###############################

suppress_values <- function(df) {
  df %>%
    mutate(
      Unweighted_Numerator = if_else(as.numeric(Unweighted_Numerator) < 5 & !is.na(as.numeric(Unweighted_Numerator)), "Suppressed", as.character(Unweighted_Numerator)),
      Unweighted_Denominator = if_else(as.numeric(Unweighted_Denominator) < 30 & !is.na(as.numeric(Unweighted_Denominator)), "Suppressed", as.character(Unweighted_Denominator)),
      Unweighted_Denominator = if_else(Unweighted_Numerator == "Suppressed", "Suppressed", Unweighted_Denominator),
      Prevalence_Estimate = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Prevalence_Estimate)),
      Confidence_Interval_Low = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_Low)),
      Confidence_Interval_High = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_High)),
      Relative_Standard_Error = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Relative_Standard_Error)),
      RSE_Flag = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(RSE_Flag))
    )
}

# Apply the combined suppression rules
all_var_columns <- suppress_values(all_var_columns)

 

# head the modified dataframe to the console
head(all_var_columns)



all_var_columns11 <- all_var_columns
```

### 2009 - Analysis

```{r message = FALSE, warning = FALSE, eval=FALSE}

yrbs_master_analysis <- read.xlsx("raw_yrbs_allyears_statewide_trad_cleaned.xlsx")


yrbs_master_analysis <- yrbs_master_analysis %>%
  filter(Survey_Year == 2009,
         School_Type == "Statewide Traditional")

# Get column names that match the pattern
pattern_cols <- names(yrbs_master_analysis)[grepl("^(QN|V).*[RP]", names(yrbs_master_analysis))]

# Define a function to check if a column contains 1 or 2
contains_1_or_2 <- function(column) {
  any(column %in% c(1, 2))
}

# Identify columns to remove
cols_to_remove <- sapply(yrbs_master_analysis[pattern_cols], function(col) !contains_1_or_2(col))
cols_to_remove <- pattern_cols[cols_to_remove]

# Remove the identified columns
yrbs_master_analysis <- select(yrbs_master_analysis, -all_of(cols_to_remove))

# Remove whitespcae
remove_whitespace_from_all_columns <- function(df) {
  df[] <- lapply(df, function(x) {
    if (is.character(x)) {
      return(trimws(x, which = "both"))
    } else {
      return(x)
    }
  })
  return(df)
}

# Apply the function to your dataframe
yrbs_master_analysis <- remove_whitespace_from_all_columns(yrbs_master_analysis)



# For Schools with Cluster Sampling like Anchorage
#Create Survey Design Object
survey_design <- yrbs_master_analysis %>% 
  as_survey_design(ids = Primary_Samp_Unit,
                   #PSU (Cluster) 1st level sampling
                   strata = Stratum, # Strata variable 
                   weights = Final_Weight, # Weighting variable
                   nest = TRUE, # Not nesting stages
                   )


#Create Function with Survey Design Object
svy_multi_est_fun <- function(year = NULL,
                              elements = NULL,
                              school_type = NULL,
                              design = NULL) #starts with parameters at null
  {
  survey_design_all_var <- design %>%
    filter(!is.na(get(elements)), #excludes missing values in variables
           Survey_Year == year, #Need to choose surve year.
           School_Type == school_type # Must choose Alternative or Traditional etc 
          ) %>% 
    
    group_by(get(elements)) %>% # group by unique values, what will be in rows
    
    summarize(
      unweighted_numerator_1 = sum(get(elements) == 1, na.rm = TRUE),
      unweighted_numerator_2 = sum(get(elements) == 2, na.rm = TRUE),
      wt.mean = round(survey_mean(proportion = TRUE, # variables are binary
                                  prop_method = 'logit', #logit method/binary
                                  vartype = 'ci'), # confidence intervals
                                  digits = 3), # Round to 3 digits
              ) %>%
   
    # .cols chooses column, ~ mean do it right here, then rename it to "XX"
    rename_with(.cols = 1, ~ "ROI_Indicator_Code") %>% 
   
    # Assigns elements value to every row in column, overwriting value
    mutate(ROI_Indicator_Code = elements)
  
    # constructs the final output of all ROI's into master aggregate data set
    # for a specific district, year, school type specified
    cbind(
          Year = year,
          School_Type = school_type,
          survey_design_all_var)
    
} # This designates the end of the function Loop



# First need to make empty dataframe, will store results from svy_multi_est_fun
all_var_columns <- data.frame()

# Function parameters are currently set to the following. Change for current needs
syear <- 2009  
stype <- "Statewide Traditional"  
 



# This 'for' loop iterates over names of columns in survey_design$variables
# that match a specific pattern: ^(QN|V).*[RP] which will choose the ROI's
for (j in c(names(survey_design$variables %>%
                   select(matches("^(QN|V).*[RP]"))))) 
  {
  all_var_columns = rbind(svy_multi_est_fun( 
                                  year = syear,
                                  school_type = stype,
                                  elements = j, # j for Jared-he created this
                                  design = survey_design), 
                                  all_var_columns)
  } # denotes end of function

#If it errors above, it is because there are columns of data with no data in it. 
#Go through excel file and delete all columns with no 1's or 2's then re-run.

# See the first 5 rows of the data set
head(all_var_columns)




# Read the specific sheet from the Excel file
yrbs_masterpiece <- read.xlsx("YRBS Masterpiece.xlsx", sheet = "ROI - All")
# ** In the Master Inventory doc, this name changed **

# Select necessary columns from the yrbs_masterpiece dataframe
yrbs_masterpiece <- yrbs_masterpiece %>%
  select(ROI_Indicator_Code,
         Health_Topic,
         Indicator_Long_Description
         ) %>%
  sapply(trimws)

# Merge the data frames on the specified columns
all_var_columns <- merge(all_var_columns, yrbs_masterpiece, 
                     by.x = "ROI_Indicator_Code",
                     by.y = "ROI_Indicator_Code", 
                     all.x = TRUE) # all.x = TRUE- keep all observations

# Check the first few rows of the merged data frame
head(all_var_columns)




# Add Denominator by adding count of 1's and 2's, ascending order num total
all_var_columns <- all_var_columns %>%
  group_by(ROI_Indicator_Code) %>%
  mutate(Unweighted_Denominator =
           sum(unweighted_numerator_1 + unweighted_numerator_2)) %>%
  filter(unweighted_numerator_1 != 0) %>%
  select(-unweighted_numerator_2) %>%
  arrange(unweighted_numerator_1)

head(all_var_columns)



# Rename the columns
all_var_columns <- all_var_columns %>%
  rename(
    Prevalence_Estimate = wt.mean,
    Confidence_Interval_Low = wt.mean_low,
    Confidence_Interval_High = wt.mean_upp,
    Unweighted_Numerator = unweighted_numerator_1,
    Survey_Year = Year
  )



# Rearrange columns in desired order and organize rest alphabetically
all_var_columns <- all_var_columns %>%
  select(
    Survey_Year,
    School_Type,
    Health_Topic,
    ROI_Indicator_Code,
    Indicator_Long_Description,
    Prevalence_Estimate,
    Confidence_Interval_Low,
    Confidence_Interval_High,
    Unweighted_Numerator,
    Unweighted_Denominator,
    everything()
  )

# Sort by Health_Topic then ROI indicator in ascending order
all_var_columns <- all_var_columns %>% 
  arrange(Health_Topic,
          ROI_Indicator_Code
          )

all_var_columns <- all_var_columns %>%
  mutate(
    Prevalence_Estimate = round(Prevalence_Estimate * 100, 3),
    Confidence_Interval_Low = round(Confidence_Interval_Low * 100, 3),
    Confidence_Interval_High = round(Confidence_Interval_High * 100, 3)
  )



# Calculate the Relative Standard Error (RSE) from the Confidence Interval (CI)
# Here we're assuming a 95% CI, so the multiplier is 1.95. 
# FYI - Coefficient of Variation (CV) and RSE are used interchangeably when
# used to calculate 
all_var_columns <- all_var_columns %>%
  mutate(
    Standard_Error = round((as.numeric(Confidence_Interval_High) - as.numeric(Confidence_Interval_Low)) / (1.95 * 2), 1),
    Relative_Standard_Error = round((Standard_Error / as.numeric(Prevalence_Estimate)) * 100, 1),
    Relative_Standard_Error = ifelse(as.numeric(Prevalence_Estimate) == 0, NA,
                                     Relative_Standard_Error), # Assign NA when 0
    RSE_Flag = case_when(
      Relative_Standard_Error > 50 ~ "Very Unstable", 
      Relative_Standard_Error > 30 ~ "Unstable",     
      TRUE ~ NA_character_)
    ) %>%
  select(-Standard_Error)



#################################### Supression ###############################

suppress_values <- function(df) {
  df %>%
    mutate(
      Unweighted_Numerator = if_else(as.numeric(Unweighted_Numerator) < 5 & !is.na(as.numeric(Unweighted_Numerator)), "Suppressed", as.character(Unweighted_Numerator)),
      Unweighted_Denominator = if_else(as.numeric(Unweighted_Denominator) < 30 & !is.na(as.numeric(Unweighted_Denominator)), "Suppressed", as.character(Unweighted_Denominator)),
      Unweighted_Denominator = if_else(Unweighted_Numerator == "Suppressed", "Suppressed", Unweighted_Denominator),
      Prevalence_Estimate = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Prevalence_Estimate)),
      Confidence_Interval_Low = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_Low)),
      Confidence_Interval_High = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_High)),
      Relative_Standard_Error = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Relative_Standard_Error)),
      RSE_Flag = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(RSE_Flag))
    )
}

# Apply the combined suppression rules
all_var_columns <- suppress_values(all_var_columns)



# head the modified dataframe to the console
head(all_var_columns)


all_var_columns09 <- all_var_columns
```

### 2007 - Analysis

```{r message = FALSE, warning = FALSE, eval=FALSE}

yrbs_master_analysis <- read.xlsx("raw_yrbs_allyears_statewide_trad_cleaned.xlsx")



yrbs_master_analysis <- yrbs_master_analysis %>%
  filter(Survey_Year == 2007,
         School_Type == "Statewide Traditional")



# Get column names that match the pattern
pattern_cols <- names(yrbs_master_analysis)[grepl("^(QN|V).*[RP]", names(yrbs_master_analysis))]

# Define a function to check if a column contains 1 or 2
contains_1_or_2 <- function(column) {
  any(column %in% c(1, 2))
}



# Identify columns to remove
cols_to_remove <- sapply(yrbs_master_analysis[pattern_cols], function(col) !contains_1_or_2(col))
cols_to_remove <- pattern_cols[cols_to_remove]

# Remove the identified columns
yrbs_master_analysis <- select(yrbs_master_analysis, -all_of(cols_to_remove))


# Remove whitespcae
remove_whitespace_from_all_columns <- function(df) {
  df[] <- lapply(df, function(x) {
    if (is.character(x)) {
      return(trimws(x, which = "both"))
    } else {
      return(x)
    }
  })
  return(df)
}

# Apply the function to your dataframe
yrbs_master_analysis <- remove_whitespace_from_all_columns(yrbs_master_analysis)



# For Schools with Cluster Sampling like Anchorage
#Create Survey Design Object
survey_design <- yrbs_master_analysis %>% 
  as_survey_design(ids = Primary_Samp_Unit,
                   #PSU (Cluster) 1st level sampling
                   strata = Stratum, # Strata variable 
                   weights = Final_Weight, # Weighting variable
                   nest = TRUE, # Not nesting stages
                   )


#Create Function with Survey Design Object
svy_multi_est_fun <- function(year = NULL,
                              elements = NULL,
                              school_type = NULL,
                              design = NULL) #starts with parameters at null
  {
  survey_design_all_var <- design %>%
    filter(!is.na(get(elements)), #excludes missing values in variables
           Survey_Year == year, #Need to choose surve year.
           School_Type == school_type # Must choose Alternative or Traditional etc 
          ) %>% 
    
    group_by(get(elements)) %>% # group by unique values, what will be in rows
    
    summarize(
      unweighted_numerator_1 = sum(get(elements) == 1, na.rm = TRUE),
      unweighted_numerator_2 = sum(get(elements) == 2, na.rm = TRUE),
      wt.mean = round(survey_mean(proportion = TRUE, # variables are binary
                                  prop_method = 'logit', #logit method/binary
                                  vartype = 'ci'), # confidence intervals
                                  digits = 3), # Round to 3 digits
              ) %>%
   
    # .cols chooses column, ~ mean do it right here, then rename it to "XX"
    rename_with(.cols = 1, ~ "ROI_Indicator_Code") %>% 
   
    # Assigns elements value to every row in column, overwriting value
    mutate(ROI_Indicator_Code = elements)
  
    # constructs the final output of all ROI's into master aggregate data set
    # for a specific district, year, school type specified
    cbind(
          Year = year,
          School_Type = school_type,
          survey_design_all_var)
    
} # This designates the end of the function Loop



# First need to make empty dataframe, will store results from svy_multi_est_fun
all_var_columns <- data.frame()

# Function parameters are currently set to the following. Change for current needs
syear <- 2007  
stype <- "Statewide Traditional"  
 



# This 'for' loop iterates over names of columns in survey_design$variables
# that match a specific pattern: ^(QN|V).*[RP] which will choose the ROI's
for (j in c(names(survey_design$variables %>%
                   select(matches("^(QN|V).*[RP]"))))) 
  {
  all_var_columns = rbind(svy_multi_est_fun( 
                                  year = syear,
                                  school_type = stype,
                                  elements = j, # j for Jared-he created this
                                  design = survey_design), 
                                  all_var_columns)
  } # denotes end of function

#If it errors above, it is because there are columns of data with no data in it. 
#Go through excel file and delete all columns with no 1's or 2's then re-run.

# See the first 5 rows of the data set
head(all_var_columns)




# Read the specific sheet from the Excel file
yrbs_masterpiece <- read.xlsx("YRBS Masterpiece.xlsx", sheet = "ROI - All")
# ** In the Master Inventory doc, this name changed **

# Select necessary columns from the yrbs_masterpiece dataframe
yrbs_masterpiece <- yrbs_masterpiece %>%
  select(ROI_Indicator_Code,
         Health_Topic,
         Indicator_Long_Description
         ) %>%
  sapply(trimws)

# Merge the data frames on the specified columns
all_var_columns <- merge(all_var_columns, yrbs_masterpiece, 
                     by.x = "ROI_Indicator_Code",
                     by.y = "ROI_Indicator_Code", 
                     all.x = TRUE) # all.x = TRUE- keep all observations

# Check the first few rows of the merged data frame
head(all_var_columns)



# Add Denominator by adding count of 1's and 2's, ascending order num total
all_var_columns <- all_var_columns %>%
  group_by(ROI_Indicator_Code) %>%
  mutate(Unweighted_Denominator =
           sum(unweighted_numerator_1 + unweighted_numerator_2)) %>%
  filter(unweighted_numerator_1 != 0) %>%
  select(-unweighted_numerator_2) %>%
  arrange(unweighted_numerator_1)

head(all_var_columns)



# Rename the columns
all_var_columns <- all_var_columns %>%
  rename(
    Prevalence_Estimate = wt.mean,
    Confidence_Interval_Low = wt.mean_low,
    Confidence_Interval_High = wt.mean_upp,
    Unweighted_Numerator = unweighted_numerator_1,
    Survey_Year = Year
  )

# Rearrange columns in desired order and organize rest alphabetically
all_var_columns <- all_var_columns %>%
  select(
    Survey_Year,
    School_Type,
    Health_Topic,
    ROI_Indicator_Code,
    Indicator_Long_Description,
    Prevalence_Estimate,
    Confidence_Interval_Low,
    Confidence_Interval_High,
    Unweighted_Numerator,
    Unweighted_Denominator,
    everything()
  )

# Sort by Health_Topic then ROI indicator in ascending order
all_var_columns <- all_var_columns %>% 
  arrange(Health_Topic,
          ROI_Indicator_Code
          )

all_var_columns <- all_var_columns %>%
  mutate(
    Prevalence_Estimate = round(Prevalence_Estimate * 100, 3),
    Confidence_Interval_Low = round(Confidence_Interval_Low * 100, 3),
    Confidence_Interval_High = round(Confidence_Interval_High * 100, 3)
  )



# Calculate the Relative Standard Error (RSE) from the Confidence Interval (CI)
# Here we're assuming a 95% CI, so the multiplier is 1.95. 
# FYI - Coefficient of Variation (CV) and RSE are used interchangeably when
# used to calculate 
all_var_columns <- all_var_columns %>%
  mutate(
    Standard_Error = round((as.numeric(Confidence_Interval_High) - as.numeric(Confidence_Interval_Low)) / (1.95 * 2), 1),
    Relative_Standard_Error = round((Standard_Error / as.numeric(Prevalence_Estimate)) * 100, 1),
    Relative_Standard_Error = ifelse(as.numeric(Prevalence_Estimate) == 0, NA,
                                     Relative_Standard_Error), # Assign NA when 0
    RSE_Flag = case_when(
      Relative_Standard_Error > 50 ~ "Very Unstable", 
      Relative_Standard_Error > 30 ~ "Unstable",     
      TRUE ~ NA_character_)
    ) %>%
  select(-Standard_Error)



#################################### Supression ###############################

suppress_values <- function(df) {
  df %>%
    mutate(
      Unweighted_Numerator = if_else(as.numeric(Unweighted_Numerator) < 5 & !is.na(as.numeric(Unweighted_Numerator)), "Suppressed", as.character(Unweighted_Numerator)),
      Unweighted_Denominator = if_else(as.numeric(Unweighted_Denominator) < 30 & !is.na(as.numeric(Unweighted_Denominator)), "Suppressed", as.character(Unweighted_Denominator)),
      Unweighted_Denominator = if_else(Unweighted_Numerator == "Suppressed", "Suppressed", Unweighted_Denominator),
      Prevalence_Estimate = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Prevalence_Estimate)),
      Confidence_Interval_Low = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_Low)),
      Confidence_Interval_High = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_High)),
      Relative_Standard_Error = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Relative_Standard_Error)),
      RSE_Flag = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(RSE_Flag))
    )
}

# Apply the combined suppression rules
all_var_columns <- suppress_values(all_var_columns)

  

# head the modified dataframe to the console
head(all_var_columns)



all_var_columns07 <- all_var_columns
```

### 2005 - Analysis - There was no Statewide survey done in 2005

```{r message = FALSE, warning = FALSE, eval=FALSE}

# The Statewide survey was unweighted and therefore results were not released.

```

### 2003 - Analysis

```{r message = FALSE, warning = FALSE, eval=FALSE}

yrbs_master_analysis <- read.xlsx("raw_yrbs_allyears_statewide_trad_cleaned.xlsx")



yrbs_master_analysis <- yrbs_master_analysis %>%
  filter(Survey_Year == 2003,
         School_Type == "Statewide Traditional")



# Get column names that match the pattern
pattern_cols <- names(yrbs_master_analysis)[grepl("^(QN|V).*[RP]", names(yrbs_master_analysis))]

# Define a function to check if a column contains 1 or 2
contains_1_or_2 <- function(column) {
  any(column %in% c(1, 2))
}

# Identify columns to remove
cols_to_remove <- sapply(yrbs_master_analysis[pattern_cols], function(col) !contains_1_or_2(col))
cols_to_remove <- pattern_cols[cols_to_remove]

# Remove the identified columns
yrbs_master_analysis <- select(yrbs_master_analysis, -all_of(cols_to_remove))


# Remove whitespcae
remove_whitespace_from_all_columns <- function(df) {
  df[] <- lapply(df, function(x) {
    if (is.character(x)) {
      return(trimws(x, which = "both"))
    } else {
      return(x)
    }
  })
  return(df)
}

# Apply the function to your dataframe
yrbs_master_analysis <- remove_whitespace_from_all_columns(yrbs_master_analysis)



# For Schools with Cluster Sampling like Anchorage
#Create Survey Design Object
survey_design <- yrbs_master_analysis %>% 
  as_survey_design(ids = Primary_Samp_Unit,
                   #PSU (Cluster) 1st level sampling
                   strata = Stratum, # Strata variable 
                   weights = Final_Weight, # Weighting variable
                   nest = TRUE, # Not nesting stages
                   )



#Create Function with Survey Design Object
svy_multi_est_fun <- function(year = NULL,
                              elements = NULL,
                              school_type = NULL,
                              design = NULL) #starts with parameters at null
  {
  survey_design_all_var <- design %>%
    filter(!is.na(get(elements)), #excludes missing values in variables
           Survey_Year == year, #Need to choose surve year.
           School_Type == school_type # Must choose Alternative or Traditional etc 
          ) %>% 
    
    group_by(get(elements)) %>% # group by unique values, what will be in rows
    
    summarize(
      unweighted_numerator_1 = sum(get(elements) == 1, na.rm = TRUE),
      unweighted_numerator_2 = sum(get(elements) == 2, na.rm = TRUE),
      wt.mean = round(survey_mean(proportion = TRUE, # variables are binary
                                  prop_method = 'logit', #logit method/binary
                                  vartype = 'ci'), # confidence intervals
                                  digits = 3), # Round to 3 digits
              ) %>%
   
    # .cols chooses column, ~ mean do it right here, then rename it to "XX"
    rename_with(.cols = 1, ~ "ROI_Indicator_Code") %>% 
   
    # Assigns elements value to every row in column, overwriting value
    mutate(ROI_Indicator_Code = elements)
  
    # constructs the final output of all ROI's into master aggregate data set
    # for a specific district, year, school type specified
    cbind(
          Year = year,
          School_Type = school_type,
          survey_design_all_var)
    
} # This designates the end of the function Loop



# First need to make empty dataframe, will store results from svy_multi_est_fun
all_var_columns <- data.frame()

# Function parameters are currently set to the following. Change for current needs
syear <- 2003  
stype <- "Statewide Traditional"  
 



# This 'for' loop iterates over names of columns in survey_design$variables
# that match a specific pattern: ^(QN|V).*[RP] which will choose the ROI's
for (j in c(names(survey_design$variables %>%
                   select(matches("^(QN|V).*[RP]"))))) 
  {
  all_var_columns = rbind(svy_multi_est_fun( 
                                  year = syear,
                                  school_type = stype,
                                  elements = j, # j for Jared-he created this
                                  design = survey_design), 
                                  all_var_columns)
  } # denotes end of function

#If it errors above, it is because there are columns of data with no data in it. 
#Go through excel file and delete all columns with no 1's or 2's then re-run.

# See the first 5 rows of the data set
head(all_var_columns)




# Read the specific sheet from the Excel file
yrbs_masterpiece <- read.xlsx("YRBS Masterpiece.xlsx", sheet = "ROI - All")
# ** In the Master Inventory doc, this name changed **

# Select necessary columns from the yrbs_masterpiece dataframe
yrbs_masterpiece <- yrbs_masterpiece %>%
  select(ROI_Indicator_Code,
         Health_Topic,
         Indicator_Long_Description
         ) %>%
  sapply(trimws)

# Merge the data frames on the specified columns
all_var_columns <- merge(all_var_columns, yrbs_masterpiece, 
                     by.x = "ROI_Indicator_Code",
                     by.y = "ROI_Indicator_Code", 
                     all.x = TRUE) # all.x = TRUE- keep all observations

# Check the first few rows of the merged data frame
head(all_var_columns)



# Add Denominator by adding count of 1's and 2's, ascending order num total
all_var_columns <- all_var_columns %>%
  group_by(ROI_Indicator_Code) %>%
  mutate(Unweighted_Denominator =
           sum(unweighted_numerator_1 + unweighted_numerator_2)) %>%
  filter(unweighted_numerator_1 != 0) %>%
  select(-unweighted_numerator_2) %>%
  arrange(unweighted_numerator_1)

head(all_var_columns)



# Rename the columns
all_var_columns <- all_var_columns %>%
  rename(
    Prevalence_Estimate = wt.mean,
    Confidence_Interval_Low = wt.mean_low,
    Confidence_Interval_High = wt.mean_upp,
    Unweighted_Numerator = unweighted_numerator_1,
    Survey_Year = Year
  )

# Rearrange columns in desired order and organize rest alphabetically
all_var_columns <- all_var_columns %>%
  select(
    Survey_Year,
    School_Type,
    Health_Topic,
    ROI_Indicator_Code,
    Indicator_Long_Description,
    Prevalence_Estimate,
    Confidence_Interval_Low,
    Confidence_Interval_High,
    Unweighted_Numerator,
    Unweighted_Denominator,
    everything()
  )
# Sort by Health_Topic then ROI indicator in ascending order
all_var_columns <- all_var_columns %>% 
  arrange(Health_Topic,
          ROI_Indicator_Code
          )

all_var_columns <- all_var_columns %>%
  mutate(
    Prevalence_Estimate = round(Prevalence_Estimate * 100, 3),
    Confidence_Interval_Low = round(Confidence_Interval_Low * 100, 3),
    Confidence_Interval_High = round(Confidence_Interval_High * 100, 3)
  )



# Calculate the Relative Standard Error (RSE) from the Confidence Interval (CI)
# Here we're assuming a 95% CI, so the multiplier is 1.95. 
# FYI - Coefficient of Variation (CV) and RSE are used interchangeably when
# used to calculate 
all_var_columns <- all_var_columns %>%
  mutate(
    Standard_Error = round((as.numeric(Confidence_Interval_High) - as.numeric(Confidence_Interval_Low)) / (1.95 * 2), 1),
    Relative_Standard_Error = round((Standard_Error / as.numeric(Prevalence_Estimate)) * 100, 1),
    Relative_Standard_Error = ifelse(as.numeric(Prevalence_Estimate) == 0, NA,
                                     Relative_Standard_Error), # Assign NA when 0
    RSE_Flag = case_when(
      Relative_Standard_Error > 50 ~ "Very Unstable", 
      Relative_Standard_Error > 30 ~ "Unstable",     
      TRUE ~ NA_character_)
    ) %>%
  select(-Standard_Error)



#################################### Supression ###############################

suppress_values <- function(df) {
  df %>%
    mutate(
      Unweighted_Numerator = if_else(as.numeric(Unweighted_Numerator) < 5 & !is.na(as.numeric(Unweighted_Numerator)), "Suppressed", as.character(Unweighted_Numerator)),
      Unweighted_Denominator = if_else(as.numeric(Unweighted_Denominator) < 30 & !is.na(as.numeric(Unweighted_Denominator)), "Suppressed", as.character(Unweighted_Denominator)),
      Unweighted_Denominator = if_else(Unweighted_Numerator == "Suppressed", "Suppressed", Unweighted_Denominator),
      Prevalence_Estimate = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Prevalence_Estimate)),
      Confidence_Interval_Low = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_Low)),
      Confidence_Interval_High = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_High)),
      Relative_Standard_Error = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Relative_Standard_Error)),
      RSE_Flag = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(RSE_Flag))
    )
}

# Apply the combined suppression rules
all_var_columns <- suppress_values(all_var_columns)



# head the modified dataframe to the console
head(all_var_columns)



all_var_columns03 <- all_var_columns
```

### Workbook Creation

```{r message = FALSE, warning = FALSE, eval=FALSE}

# Function to safely convert to numeric and handle NAs
safe_as_numeric <- function(x) {
  suppressWarnings(as.numeric(x))
}

# Combined suppression function
suppress_values <- function(df) {
  df %>%
    mutate(
      Unweighted_Numerator = if_else(safe_as_numeric(Unweighted_Numerator) < 5 & !is.na(safe_as_numeric(Unweighted_Numerator)), "Suppressed", as.character(Unweighted_Numerator)),
      Unweighted_Denominator = if_else(safe_as_numeric(Unweighted_Denominator) < 30 & !is.na(safe_as_numeric(Unweighted_Denominator)), "Suppressed", as.character(Unweighted_Denominator)),
      Unweighted_Denominator = if_else(Unweighted_Numerator == "Suppressed", "Suppressed", Unweighted_Denominator),
      Prevalence_Estimate = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Prevalence_Estimate)),
      Confidence_Interval_Low = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_Low)),
      Confidence_Interval_High = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Confidence_Interval_High)),
      Relative_Standard_Error = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(Relative_Standard_Error)),
      RSE_Flag = if_else(Unweighted_Numerator == "Suppressed" | Unweighted_Denominator == "Suppressed", "Suppressed", as.character(RSE_Flag))
    )
}

# Apply the combined suppression rules to all data frames
all_var_columns03 <- suppress_values(all_var_columns03)
all_var_columns07 <- suppress_values(all_var_columns07)
all_var_columns09 <- suppress_values(all_var_columns09)
all_var_columns11 <- suppress_values(all_var_columns11)
all_var_columns13 <- suppress_values(all_var_columns13)
all_var_columns15 <- suppress_values(all_var_columns15)
all_var_columns17 <- suppress_values(all_var_columns17)
all_var_columns19 <- suppress_values(all_var_columns19)
all_var_columns23 <- suppress_values(all_var_columns23)

# Combine all years into one data frame
all_years_combined <- bind_rows(
  all_var_columns03,
  all_var_columns07,
  all_var_columns09,
  all_var_columns11,
  all_var_columns13,
  all_var_columns15,
  all_var_columns17,
  all_var_columns19,
  all_var_columns23
)

# Remove duplicate rows
all_years_combined <- all_years_combined %>% distinct()

# Modify Prevalence_Estimate values and apply additional suppression
all_years_combined <- all_years_combined %>%
  mutate(
    Prevalence_Estimate = case_when(
      Prevalence_Estimate == "Suppressed" ~ Prevalence_Estimate,
      !is.na(safe_as_numeric(Prevalence_Estimate)) & safe_as_numeric(Prevalence_Estimate) <= 2 ~ "2.0",
      !is.na(safe_as_numeric(Prevalence_Estimate)) & safe_as_numeric(Prevalence_Estimate) >= 98 ~ "98.0",
      TRUE ~ Prevalence_Estimate
    ),
    Confidence_Interval_Low = if_else(Prevalence_Estimate == "2.0" | Prevalence_Estimate == "98.0", "Suppressed", as.character(Confidence_Interval_Low)),
    Confidence_Interval_High = if_else(Prevalence_Estimate == "2.0" | Prevalence_Estimate == "98.0", "Suppressed", as.character(Confidence_Interval_High)),
    Unweighted_Numerator = if_else(Prevalence_Estimate == "2.0" | Prevalence_Estimate == "98.0", "Suppressed", as.character(Unweighted_Numerator)),
    Unweighted_Denominator = if_else(Prevalence_Estimate == "2.0" | Prevalence_Estimate == "98.0", "Suppressed", as.character(Unweighted_Denominator)),
    Relative_Standard_Error = if_else(Prevalence_Estimate == "2.0" | Prevalence_Estimate == "98.0", "Suppressed", as.character(Relative_Standard_Error)),
    RSE_Flag = if_else(Prevalence_Estimate == "2.0" | Prevalence_Estimate == "98.0", "Suppressed", as.character(RSE_Flag))
  )



# Create a new workbook
wb <- createWorkbook()

# Add sheets to the workbook
addWorksheet(wb, "Overall")
addWorksheet(wb, "Overall Trend")

# Write data to the "Overall" sheet
writeData(wb, sheet = "Overall", all_years_combined, na.string = "Suppressed")

# Reshape the data for the trend analysis without altering suppression status
trend_table <- all_years_combined %>%
  select(Survey_Year, 
         School_Type,
         Health_Topic, 
         ROI_Indicator_Code, 
         Prevalence_Estimate, 
         Indicator_Long_Description) %>%
  pivot_wider(names_from = Survey_Year, values_from = Prevalence_Estimate)

# Add empty columns for 2005 and 2021
trend_table$`2005` <- NA
trend_table$`2021` <- NA

# Reorder columns to maintain chronological order
ordered_years_cols <- c(
  "2003",
  "2007",
  "2009", 
  "2011", 
  "2013", 
  "2015", 
  "2017", 
  "2019", 
  "2021",
  "2023"
)

trend_table <- trend_table %>%
  select(School_Type, 
         Health_Topic, 
         ROI_Indicator_Code,
         Indicator_Long_Description, 
         all_of(ordered_years_cols)) %>%
  arrange(Health_Topic,
          ROI_Indicator_Code)



# Modify Prevalence_Estimate values in the trend table and apply additional suppression
trend_table <- trend_table %>%
  mutate(across(starts_with("20"), ~ case_when(
    . == "Suppressed" ~ .,
    !is.na(safe_as_numeric(.)) & safe_as_numeric(.) <= 2 ~ "2.0",
    !is.na(safe_as_numeric(.)) & safe_as_numeric(.) >= 98 ~ "98.0",
    TRUE ~ .
  )))

# Write the trend_table dataframe to the "Overall Trend" sheet
writeData(wb, sheet = "Overall Trend", trend_table, na.string = "")

# Save the workbook
saveWorkbook(wb, "yrbs_master_analysis_statewide_trad_overall.xlsx", overwrite = TRUE)

```

### QC Code

```{r message = FALSE, warning = FALSE, eval=FALSE}

#This QC checks to see if an ROI is present in the overall analysis compared to what the Masterpiece says there should be.

masterpiece_ROIs <- read.xlsx('YRBS Masterpiece.xlsx', sheet = "ROI - All")

overall_ROIs <- read.xlsx('yrbs_master_analysis_statewide_trad_overall.xlsx', sheet = "Overall Trend")

# Assuming your DataFrame is named yrbs_master_stwd_trad
masterpiece_ROIs <- masterpiece_ROIs %>%
  filter(ROI_Risk_or_Protective %in% c("Neither",
                             "Risk",
                             "Protective" #,
                             #"Comment it out"
                             )) %>%
  select(ROI_Indicator_Code,
         Health_Topic,
         Indicator_Long_Description,
         )

# Assuming your DataFrame is named yrbs_master_stwd_trad
overall_ROIs <- overall_ROIs %>%
  select(ROI_Indicator_Code,
         Health_Topic,
         Indicator_Long_Description,
         )

# Find ROI_Indicator_Code values in masterpiece_ROIs not in overall_ROIs
missing_in_overall <- masterpiece_ROIs %>%
  anti_join(overall_ROIs, by = "ROI_Indicator_Code")

# Find ROI_Indicator_Code values in overall_ROIs not in masterpiece_ROIs
missing_in_masterpiece <- overall_ROIs %>%
  anti_join(masterpiece_ROIs, by = "ROI_Indicator_Code")

# head the missing ROI_Indicator_Code values
#head("Missing in overall_ROIs:")
head(missing_in_overall)

#head("Missing in masterpiece_ROIs:")
head(missing_in_masterpiece)




# QC Check for any duplicate rows, and if Health_Topic or Long_Indicator_Description is blank

 # Load the data
 overall_data <- read.xlsx('yrbs_master_analysis_statewide_trad_overall.xlsx', sheet = "Overall")

 # Check for duplicate rows
 duplicates <- overall_data %>%
   group_by_all() %>%
   filter(n() > 1) %>%
   ungroup()

 # Identify rows where Health_Topic or Indicator_Long_Description is blank/NA
 blanks_or_na <- overall_data %>%
   filter(is.na(Health_Topic) | Health_Topic == "" |
          is.na(Indicator_Long_Description) | Indicator_Long_Description == "")

 # head the duplicate rows
 if(nrow(duplicates) > 0) {
 head("Duplicate rows found:")
   head(duplicates)
# } else {
  head("No duplicate rows found.")
}

# head the rows with blank/NA Health_Topic or Indicator_Long_Description
if(nrow(blanks_or_na) > 0) {
  head("Rows with blank/NA Health_Topic or Indicator_Long_Description:")
  head(blanks_or_na)
} else {
  head("No rows with blank/NA Health_Topic or Indicator_Long_Description found.")
}

```

### 
